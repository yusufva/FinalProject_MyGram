definitions:
  dto.CommentResponse:
    properties:
      created_at:
        example: "2023-01-01"
        type: string
      id:
        example: 1
        type: integer
      message:
        example: example comment
        type: string
      photo_id:
        example: 1
        type: integer
      updated_at:
        example: "2023-01-01"
        type: string
      user_id:
        example: 1
        type: integer
    type: object
  dto.GetCommentResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.CommentResponse'
        type: array
      message:
        example: comment data have been sent
        type: string
      result:
        example: success
        type: string
      statuscode:
        example: 200
        type: integer
    type: object
  dto.GetPhotoResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.PhotoResponse'
        type: array
      message:
        example: photo data have been sent
        type: string
      result:
        example: success
        type: string
      statuscode:
        example: 200
        type: integer
    type: object
  dto.GetSocialMediaResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.SocialMediaResponse'
        type: array
      message:
        example: social media data have been sent
        type: string
      result:
        example: success
        type: string
      statuscode:
        example: 200
        type: integer
    type: object
  dto.LoginRequest:
    properties:
      password:
        example: examplepassword
        type: string
      username:
        example: exampleusername
        type: string
    type: object
  dto.NewCommentRequest:
    properties:
      message:
        example: example comment
        type: string
      photo_id:
        example: 1
        type: integer
      user_id:
        example: 1
        type: integer
    type: object
  dto.NewCommentResponse:
    properties:
      message:
        example: comment have been created
        type: string
      result:
        example: success
        type: string
      statuscode:
        example: 201
        type: integer
    type: object
  dto.NewPhotoRequest:
    properties:
      caption:
        example: example caption
        type: string
      photo_url:
        example: http://examplephotourl.jpg
        type: string
      title:
        example: example title
        type: string
      user_id:
        example: 1
        type: integer
    type: object
  dto.NewPhotoResponse:
    properties:
      message:
        example: photo have been created
        type: string
      result:
        example: result
        type: string
      statuscode:
        example: 201
        type: integer
    type: object
  dto.NewSocialMediaRequest:
    properties:
      name:
        example: example name
        type: string
      social_media_url:
        example: https://examplesocmedurl.org
        type: string
      user_id:
        example: 1
        type: integer
    type: object
  dto.NewSocialMediaResponse:
    properties:
      message:
        example: social media have been created
        type: string
      result:
        example: success
        type: string
      statusCode:
        example: 201
        type: integer
    type: object
  dto.NewUserRequest:
    properties:
      age:
        example: 10
        type: integer
      email:
        example: example@mail.com
        type: string
      password:
        example: examplepassword
        type: string
      username:
        example: exampleusername
        type: string
    type: object
  dto.PhotoResponse:
    properties:
      caption:
        example: example caption
        type: string
      created_at:
        example: "2023-01-01"
        type: string
      id:
        example: 1
        type: integer
      photo_url:
        example: http://examplephotourl.jpg
        type: string
      title:
        example: example title
        type: string
      updated_at:
        example: "2023-01-01"
        type: string
      user_id:
        example: 1
        type: integer
    type: object
  dto.SocialMediaResponse:
    properties:
      created_at:
        example: "2023-01-01"
        type: string
      id:
        example: 1
        type: integer
      name:
        example: example name
        type: string
      social_media_url:
        example: https://examplesocmedurl.org
        type: string
      updated_at:
        example: "2023-01-01"
        type: string
      user_id:
        example: 1
        type: integer
    type: object
info:
  contact: {}
paths:
  /comments/{commentId}:
    delete:
      consumes:
      - application/json
      description: Delete Comment Data
      operationId: delete-comment-by-id
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: commentId
        in: path
        name: commentId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.NewCommentResponse'
      tags:
      - comments
    put:
      consumes:
      - application/json
      description: Update Comment Data
      operationId: update-comment-by-id
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: request body json
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/dto.NewCommentRequest'
      - description: commentId
        in: path
        name: commentId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.NewCommentResponse'
      tags:
      - comments
  /comments/photos:
    post:
      consumes:
      - application/json
      description: Create New Comment Data
      operationId: create-comment
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: request body json
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/dto.NewCommentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.NewCommentResponse'
      tags:
      - comments
  /comments/photos/{photoId}:
    get:
      consumes:
      - application/json
      description: Get All Comment Data
      operationId: get-all-comment
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: photoId
        in: path
        name: photoId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetCommentResponse'
      tags:
      - comments
  /comments/users:
    get:
      consumes:
      - application/json
      description: Get All Comment By User Data
      operationId: get-all-comment-by-user
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetCommentResponse'
      tags:
      - comments
  /photos:
    get:
      consumes:
      - application/json
      description: Get All Photo Data
      operationId: get-all-photo
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetPhotoResponse'
      tags:
      - photos
    post:
      consumes:
      - application/json
      description: Create New Photo Data
      operationId: create-new-photo
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: request body json
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/dto.NewPhotoRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.NewPhotoResponse'
      tags:
      - photos
  /photos/{photoId}:
    delete:
      consumes:
      - application/json
      description: Delete Photo Data
      operationId: delete-photo-by-id
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: photoId
        in: path
        name: photoId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.NewPhotoResponse'
      tags:
      - photos
    get:
      consumes:
      - application/json
      description: Get Photo By Id Data
      operationId: get-photo-by-id
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: photoId
        in: path
        name: photoId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PhotoResponse'
      tags:
      - photos
    put:
      consumes:
      - application/json
      description: Update Photo Data
      operationId: update-photo-by-id
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: photoId
        in: path
        name: photoId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.NewPhotoResponse'
      tags:
      - photos
  /photos/users/{userId}:
    get:
      consumes:
      - application/json
      description: Get Photo By User Data
      operationId: get-photo-by-user
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: userId
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetPhotoResponse'
      tags:
      - photos
  /socmeds:
    get:
      consumes:
      - application/json
      description: Get All Social Media Data
      operationId: get-all-social-Media
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetSocialMediaResponse'
      tags:
      - Social Media
    post:
      consumes:
      - application/json
      description: Create New Social Media Data
      operationId: create-new-social-media
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: request body json
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/dto.NewSocialMediaRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.NewSocialMediaResponse'
      tags:
      - Social Media
  /socmeds/{socmedId}:
    delete:
      consumes:
      - application/json
      description: Delete Social Media Data
      operationId: delete-social-media-by-id
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: socmedId
        in: path
        name: socmedId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.NewSocialMediaResponse'
      tags:
      - Social Media
    get:
      consumes:
      - application/json
      description: Get Social Media By Id Data
      operationId: get-social-media-by-id
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: socmedId
        in: path
        name: socmedId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SocialMediaResponse'
      tags:
      - Social Media
    put:
      consumes:
      - application/json
      description: Update Social Media Data
      operationId: update-social-media-by-id
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: request body json
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/dto.NewSocialMediaRequest'
      - description: socmedId
        in: path
        name: socmedId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.NewSocialMediaResponse'
      tags:
      - Social Media
  /users/login:
    post:
      consumes:
      - application/json
      description: User Login
      operationId: user-login
      parameters:
      - description: request body json
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.LoginRequest'
      tags:
      - login
  /users/register:
    post:
      consumes:
      - application/json
      description: User Registers
      operationId: user-register
      parameters:
      - description: request body json
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/dto.NewUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.NewUserRequest'
      tags:
      - Registers
swagger: "2.0"
